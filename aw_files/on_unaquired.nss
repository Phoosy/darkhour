#include "inc_bs_module"
#include "aw_include"
//Return string template sItemTemplate  of the ammo that is generated by the maker item [oItem]
//when i've time and wish i'll remake all ammunitions O_O to match the Makers Names....
string  GetAmmoByItem(object oItem);
string  GetAmmoByItem(object oItem)
{
string sTag = GetStringLowerCase(GetTag(oItem));
if (sTag == "arrowmaker")  return "nw_wamar001";
if (sTag == "axemaker")  return "nw_wthax001";
if (sTag == "boltmaker")  return "nw_wambo001";
if (sTag == "bulletmaker")  return "nw_wambu001";
if (sTag == "dartmaker")  return "nw_wthdt001";
if (sTag == "shurikenmaker")  return "nw_wthsh001";
if (sTag == "acidarrowmaker")  return "nw_wammar003i";
if (sTag == "bullet5maker")  return "nw_wammbu012i";
if (sTag == "bullet4maker")  return "nw_wammbu011i";
if (sTag == "bullet3maker")  return "nw_wammbu010i";
if (sTag == "bullet2maker")  return "nw_wammbu009i";
if (sTag == "bullet1maker")  return "nw_wammbu008i";
if (sTag == "dart5maker")  return "wthmdt003";
if (sTag == "dart4maker")  return "wthmdt002";
if (sTag == "dart3maker")  return "wthmdt010";
if (sTag == "dart2maker")  return "wthmdt009";
if (sTag == "dart1maker")  return "wthmdt004";
if (sTag == "shuriken5maker")  return "s_m_5";
if (sTag == "shuriken4maker")  return "s_m_4";
if (sTag == "shuriken3maker")  return "s_m_3";
if (sTag == "shuriken2maker")  return "s_m_2";
if (sTag == "shuriken1maker")  return "s_m_2";
if (sTag == "piercbolt5maker")  return "nw_wammbo012i";
if (sTag == "piercbolt4maker")  return "nw_wammbo011i";
if (sTag == "piercbolt3maker")  return "nw_wammbo010i";
if (sTag == "piercbolt2maker")  return "nw_wammbo009i";
if (sTag == "piercbolt1maker")  return "nw_wammbo008i";
if (sTag == "throwinga5maker")  return "ta_m_5";
if (sTag == "throwinga4maker")  return "ta_m_4";
if (sTag == "throwinga3maker")  return "ta_m_3";
if (sTag == "throwinga2maker")  return "ta_m_2";
if (sTag == "throwinga1maker")  return "ta_m_1";
if (sTag == "sonicarrowmaker")  return "sonicarrow";
if (sTag == "multiarrowmaker")  return "multiarrow";
if (sTag == "magicarrowmaker")  return "magicarrow";
if (sTag == "arrow5maker")  return "nw_wammar013i";
if (sTag == "arrow4maker")  return "nw_wammar012i";
if (sTag == "arrow3maker")  return "nw_wammar011i";
if (sTag == "arrow2maker")  return "nw_wammar010i";
if (sTag == "arrow1maker")  return "nw_wammar009i";
if (sTag == "firearrowmaker")  return "nw_wammar002i";
if (sTag == "lightboltmaker")  return "nw_wammbo002i";
if (sTag == "icearrowmaker")  return "nw_wammar005i";
if (sTag == "frostboltmaker")  return "nw_wammbo001i";
if (sTag == "fireboltmaker")  return "nw_wammbo005i";
if (sTag == "acidarrowmaker")  return "nw_wammar003i";
return "";
}

void main()
{
    object oItem = GetModuleItemLost();
    object oPlayer = GetModuleItemLostBy();
    object oCreature;


    if (!GetIsObjectValid(oItem))
    {
        return;
    }

    //:: Anti Cheating :: //
    if(GetIsDMAW(oPlayer))
    {
        PrintString("Anticheating: "+GetPCPlayerName(oPlayer)+" "+GetName(oPlayer)+" dropped: "+GetTag(oItem)+" "+GetName(oItem)+" in area: "+GetName(GetArea(oPlayer)));
    }

    //////////////////////////////////////////////////////////
    // Lordly Upgrade Special
    //////////////////////////////////////////////////////////
    // checks if the player has sold/lost the lordly upgrade
    // if so it deletes all his lordly throwing weapons
    // :: i think that any equipped throwking weapons will not
    // be removed because the equipped sloth is not inventory slot
    //////////////////////////////////////////////////////////
    if (GetTag(oItem) == "LordlyUpgrade")
    {
        float fDelay = 1.0;
        object oThrowing = GetFirstItemInInventory(oPlayer);
        while(GetIsObjectValid(oThrowing))
        {
            if( GetTag(oThrowing) == "TA_M_L" || GetTag(oThrowing) == "S_M_L" || GetTag(oThrowing) == "D_M_L")
            {
                DelayCommand(fDelay, DestroyObject(oThrowing)); fDelay += 0.1;
            }
            oThrowing = GetNextItemInInventory(oPlayer);
        }
        int i;
        for (i = 0; i < NUM_INVENTORY_SLOTS; i++)
        {
            oThrowing = GetItemInSlot(i, oPlayer);
            if( GetTag(oThrowing) == "TA_M_L" || GetTag(oThrowing) == "S_M_L" || GetTag(oThrowing) == "D_M_L")
            {
                DelayCommand(fDelay, DestroyObject(oThrowing)); fDelay += 0.1;
            }
        }
    }
    else    // is not a lordly upgrade
    //Remove all Ammo By Makers
    /// string sAmmo = GetAmmoByItem(oItem);
    if ( GetAmmoByItem(oItem) != "")
    {
        string sAmmo = GetAmmoByItem(oItem);
        WriteTimestampedLogEntry("sAmmo = " + sAmmo);
        float fDelay = 1.0;
        object oAmmunition = GetFirstItemInInventory(oPlayer);
        while(GetIsObjectValid(oAmmunition))
        {
            if(GetResRef(oAmmunition) == sAmmo)
            {
                //SetPlotFlag(oAmmunition,FALSE);
                DelayCommand(fDelay, DestroyObject(oAmmunition)); fDelay += 0.1;
            }
            oAmmunition = GetNextItemInInventory(oPlayer);
        }
        int i;
        for (i = 0; i < NUM_INVENTORY_SLOTS; i++)
        {
            oAmmunition = GetItemInSlot(i, oPlayer);
            if(GetResRef(oAmmunition) == sAmmo)
            {
                //SetPlotFlag(oAmmunition,FALSE);
                DelayCommand(fDelay, DestroyObject(oAmmunition)); fDelay += 0.1;
            }
        }
    }
    else        // is not a ammo maker

    //::///////////////////////////////////////////////
    //:: Name  Tum's Anti-Thief Script

    if ( GetBaseItemType(oItem) !=  BASE_ITEM_TRAPKIT)
    {
        object oThief = GetItemPossessor(oItem);

       // if (GetIsGMNormalChar(oPlayer))
       // {
       //     FloatingTextStringOnCreature("something has been dropped",oPlayer,FALSE);
       // }
        if(GetStolenFlag(oItem) == TRUE && GetIsPC(oPlayer)  && GetIsPC(oThief))
        {
            SendMessageToGM("<cËâ>" + GetName(oThief) + " with " + IntToString( GetSkillRank( SKILL_PICK_POCKET, oThief)) + " ranks in pickpocketing tried to steal " + GetName(oItem) + " from " + GetName(oPlayer) + " and item was returned</c>" );
            // if the item was being crafted, do not set it to not stolen
            if ( GetLocalInt(oItem, "STX_CR_TEMPITEM") != 1 )
            {
                FloatingTextStringOnCreature("Stolen Item but not crafting. Removing stolen flag",oPlayer,FALSE);
                SetStolenFlag(oItem, FALSE);
            }
            else  //was being crafted and got stolen ? should never happen, unless you manage to barter it
            {
                if (GetIsGMNormalChar(oPlayer))
                {
                    FloatingTextStringOnCreature("Item is Stolen and is a Temp Craft item.",oPlayer,FALSE);
                }

                FloatingTextStringOnCreature("1. Do not drop items you are crafting!",oPlayer,FALSE);
                DelayCommand(2.0,FloatingTextStringOnCreature("2. Next time I will punish you!",oPlayer,FALSE));
            }
            AssignCommand(oPlayer,ActionGiveItem(oItem, oPlayer));
            object oNewItem = CopyItem(oItem, oPlayer,TRUE);
            if(GetLocalObject( oPlayer, "STX_CR_ITEM") == oItem)
            {
                if (GetIsGMNormalChar(oPlayer))
                {
                    FloatingTextStringOnCreature("Dropped item while crafting...",oPlayer,FALSE);
                }
                SetLocalObject( oPlayer, "STX_CR_ITEM", oNewItem);
            }
            if(GetLocalObject( oPlayer, "original") == oItem) //crafting weapon bonus
            {
                if (GetIsGMNormalChar(oPlayer))
                {
                    FloatingTextStringOnCreature("Crafting item dropped",oPlayer,FALSE);
                }
                SetLocalObject( oPlayer, "original", oNewItem);
            }
            DelayCommand(0.2, DestroyObject(oItem));
            return;
        }
        else if (GetStolenFlag(oItem) == TRUE && !GetIsPC(oThief)  )   //is dropped on the module
        {
              //FloatingTextStringOnCreature("3. Do not drop items you are crafting!",oPlayer,FALSE);
              //DelayCommand(2.0,FloatingTextStringOnCreature("4. Next time I will punish you!",oPlayer,FALSE));
              if (GetIsGMNormalChar(oPlayer))
              {
                  //FloatingTextStringOnCreature("Item flagged stolen is not possesed by a PC, is it dropped on the ground?",oPlayer,FALSE);
              }
            //AssignCommand( oPlayer, ActionGiveItem(oItem, oPlayer));
            object oNewItem = CopyItem(oItem, oPlayer,TRUE);
            if(GetLocalObject( oPlayer, "STX_CR_ITEM") == oItem) //crafting weapon appearances
            {
                if (GetIsGMNormalChar(oPlayer))
                {
                    FloatingTextStringOnCreature("Crafting item dropped",oPlayer,FALSE);
                }
                SetLocalObject( oPlayer, "STX_CR_ITEM", oNewItem);
            }
            if(GetLocalObject( oPlayer, "original") == oItem) //crafting weapon bonus
            {
                if (GetIsGMNormalChar(oPlayer))
                {
                    FloatingTextStringOnCreature("Crafting item dropped",oPlayer,FALSE);
                }
                SetLocalObject( oPlayer, "original", oNewItem);
            }

            DelayCommand(0.2, DestroyObject(oItem));
            return;
        }
    }
    //WriteTimestampedLogEntry("Unacquired " + GetName(oItem));
    ////player is unacquiring a trapkit :: TRAPS SCRIPT ::
    else if (GetBaseItemType(oItem) == BASE_ITEM_TRAPKIT)
        {
            //trapkit doesn't exist so it has been used to set a trap
            if ( GetArea(oItem) == OBJECT_INVALID)
            {
                 //BroadcastMessage("OnUnAcquire:: a trap trigger has been set");
                 //FloatingTextStringOnCreature("OnUnAcquire::  you placed a trap!",oPlayer);
                 //now search for the trigger that the player just created
                 object oTrap = GetNearestTrapToObject(oPlayer,FALSE);
                 if  (GetObjectType(oTrap) == OBJECT_TYPE_TRIGGER)
                 {
                      //BroadcastMessage("OnUnAcquire:: trigger trap is valid and detected");
                      //the DC should be 10 + 1/2 of Rogue + Assassin level + Int modifier
                      int nRogueLevels = GetLevelByClass(CLASS_TYPE_ROGUE,oPlayer);
                      int nAssassinLevels = GetLevelByClass(CLASS_TYPE_ASSASSIN,oPlayer);
                      int nRogueInt = GetAbilityModifier(ABILITY_INTELLIGENCE ,oPlayer);
                      int nSkill = GetSkillRank(SKILL_SET_TRAP,oPlayer);
                      int nTrapDisarmDC = (nRogueLevels+nAssassinLevels)+ nRogueInt + d20();
                      int nTrapDetectDC = ((nRogueLevels+nAssassinLevels)/2)+ nRogueInt+(nSkill/2);
                      SetTrapDetectDC(oTrap,nTrapDetectDC);
                      SetTrapDisarmDC(oTrap,nTrapDisarmDC);
                     if ( GetIsGMNormalChar(oPlayer) )
                     {
                         FloatingTextStringOnCreature("Trap Disarm DC = "+IntToString(GetTrapDisarmDC(oTrap)),oPlayer);
                         FloatingTextStringOnCreature("Trap Detect DC = "+IntToString(GetTrapDetectDC(oTrap)),oPlayer);
                     }
                      //save the number of triggers on the playerto limit
                      //save a var on the trap?to know which one is already "taken"
                 }
             }
             else
              {
                 //BroadcastMessage("OnUnAcquire:: a trapkit has been dropped");
                 //FloatingTextStringOnCreature("OnUnAcquire::  you dropped a kit!",oPlayer);
             }
         }
       // A trapTrigger has been lost
       else if (GetObjectType(oItem) == OBJECT_TYPE_TRIGGER)
       {
           //BroadcastMessage("OnUnAcquire:: a traptrigger has been lost");
           //FloatingTextStringOnCreature("OnUnAcquire::  a traptrigger has been lost!",oPlayer);
       }


    // NB: KEEP THE DISARM AS LAST  OPTION because it returns and ends the script for some areas // even though could be useful for other script like traps setting
    // Disarm
    // object oThief = GetItemPossessor(oItem);
    if (GetTag(GetArea(oPlayer)) == "Jail" || GetTag(GetArea(oPlayer)) == "DmArea" || GetTag(GetArea(oPlayer)) == "Welcome" || GetTag(GetArea(oPlayer)) == "EvilCastle" || GetTag(GetArea(oPlayer)) == "GoodCastle")
    {
       //if (GetIsGMNormalChar(oPlayer))
       //{
           // this triggers also when people are selling stuff at the store in castle
           // FloatingTextStringOnCreature("Since you are in Jail/DmArea/Castle/Welcome, you can drop your weapon(can get disarmed)",oPlayer,FALSE);
      // }
      return;
    }

    if ((GetLastWeaponUsed(oPlayer) == oItem) ||
        (GetLocalString(oPlayer,"weapon1") == GetTag(oItem)) ||
        (GetLocalString(oPlayer,"weapon2") == GetTag(oItem)) )
    {
        //players always have the enemy flag O_O
        int nEnemyTeam = 3 - GetPlayerTeam(oPlayer);
        string szHasFlag = "oHasFlag_"+IntToString(nEnemyTeam);
        if (GetLocalObject(GetModule(),szHasFlag) == oPlayer)
        {
           DropFlag(oPlayer);
           RemoveFlagEffect(oPlayer);
        }
        if (GetIsGMNormalChar(oPlayer))
        {
            FloatingTextStringOnCreature("Disarm detected? or Weapon dropped...",oPlayer,FALSE);
        }
        object oNewItem = CopyItem(oItem, oPlayer,TRUE);
        if(GetLocalObject( oPlayer, "STX_CR_ITEM") == oItem)
        {
            if (GetIsGMNormalChar(oPlayer))
            {
                FloatingTextStringOnCreature("Disarmed while crafting",oPlayer,FALSE);
            }
            SetLocalObject( oPlayer, "STX_CR_ITEM", oNewItem);
        }
        if(GetLocalObject( oPlayer, "original") == oItem) //crafting weapon bonus
            {
                if (GetIsGMNormalChar(oPlayer))
                {
                    FloatingTextStringOnCreature("Crafting item dropped",oPlayer,FALSE);
                }
                SetLocalObject( oPlayer, "original", oNewItem);
            }
        DelayCommand(0.2, DestroyObject(oItem));
    }

}





